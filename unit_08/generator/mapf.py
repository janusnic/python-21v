# -*- coding:utf-8 -*-

# функция – map, когда нужно применить какую-либо функцию к каждому элементу списка.

def f(x):
    return x*x

nums = [1, 2, 3]
for num in nums:
    print f(num)

# list comprehensions :

def f(x):
    return x*x
print [f(num) for num in nums]

# проще :

def f(x):
    return x*x
print map(f, nums)

# при условии, что функцию можно записать лямбдой:

print map(lambda x: x*x, nums)


#map применяет какую-либо функцию к списку и возвращает результат в виде списка. Вы можете передать несколько списков, тогда функция (идущая первым параметром) должна принимать несколько аргументов (по количеству списков переданных в map).

def f(x, y):    
    return x*y

a = [1,3,4]
b = [3,4,5]
print map(f, a, b) # [3, 12, 20]


# Однако если списки разной длины, т.е. Один короче другого, то он будет дополнен значениями None до нужной длины. Если убрать из списка b последнее значение – пример не будет работать, т.к. В функции f произойдет попытка умножения числа на None, и питоне не позволяет это делать. Поэтому если функция f достаточно объемна, неплохо бы проверять передаваемые значения. Например ;

def f(x, y):
    if (y == None):
        y = 1    
    return x*y

# Если же вместо функции стоит None – то map действует примерно так же как и zip, но если передаваемые списки разной длины в результат будет писаться None – что кстати очень уместно в некоторых моментах.

a = [1,3,4]
b = [3,4]
print map(None, a, b) # [(1, 3), (3, 4), (4, None)]
